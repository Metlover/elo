% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/fit.elo.run.R
\name{cv.elo.run}
\alias{cv.elo.run}
\title{Use rolling-origin cv to grid search for optimal elo.run parameters}
\usage{
cv.elo.run(
  formula,
  data,
  optimfun = "mse",
  gridsearch,
  nfolds = NULL,
  groups = NULL,
  new.team.elo = 1500,
  ...
)
}
\arguments{
\item{formula}{A formula. See \link[=formula.specials]{the help page for formulas} for details.}

\item{data}{A \code{data.frame} in which to look for objects in \code{formula}.}

\item{optimfun}{A string refering to an optimization function to train the
model on. See details.}

\item{gridsearch}{A dataframe of values to be used for optimization.
See details.}

\item{nfolds}{Indicates how many folds should be used in cross-validation.
Either this value or \code{groups} should be specified. See details for more
information.}

\item{groups}{Indicates what groups should be used in cross-validation.
Either this value or \code{nfolds} should be specified. See details for more
information.}

\item{new.team.elo}{An optional argument indicating how new teams (teams not
in the training set but in the test set) should be viewed from an elo
perspective. Defaults to 1500. See details for more information.}

\item{...}{Other arguments (not used at this time).}
}
\value{
An elo object optimized by the given optimization function and
cross-validated.
}
\description{
Takes in the arguments of the given elo.run function along with an optimization
function and a grid of parameters, then performs rolling origin cross validation
to determine the optimal parameters.
}
\details{
\code{optimfun} refers to one of the following optimization functions
built into the elo package. 'mse' or 'brier' will train on minimizing the
mean squared error of the model, 'accuracy' will train on maximizing the
accuracy of the mode, 'calibration' will train on getting the calibration score
of the model as close to 1 as possible, and 'auc' will train on maximizing the
auc of the model.

\code{gridsearch} is a dataframe of parameter values that \code{fit.elo} will
search through to optimize. The dataframe's column names correspond to the
parameters to be optimized within the formula (i.e. if the term
\code{adjust(team.home,hfa)} is included, to optimize hfa you will need a
column named 'hfa' with plausible values in the grid search dataframe.
A column named "k" must be included. If you wish to optimize other parameters
while holding k constant, simply set k to the same value for all rows of the
grid search.

\code{nfolds} indicates how many folds should be used in cross-validation.
This function divides \code{data} into \code{nfolds} for cv.

\code{groups} indicates the groups to be used for folds for cross-validation.
These should be unique identifiers for each group, such as a string indicating
which tournament a game took place in or the season where a game took place.

For those unfamiliar with how rolling-origin cv works, the function first
splits the dataset into folds using either \code{nfolds} or \code{groups}.
Using the parameters in the grid-search, this function generates elo values
using the first fold, then tests those elo values on the second fold.
It then repeats the process but combines the first and second folds as the
training set, and tests on the third fold. It repeats this process until all
the folds except the first have been tested, then repeats *this* process until
all parameters have been tested. It then evaluates each set of parameters on
the simple average of the optimization.

To walk through an example, imagine that we were fitting elo parameters on a
dataframe over the past 5 season's worth of games of a professional sports
league, and I have specified the season as the grouping factor for
cross-validation. Using the first set of parameters in the grid-search,
\code{cv.elo.run} fits an elo model on the first season, then takes those
final elo values and uses them to predict the outcomes of the second season's
matches, then gathers summary metrics on those results. Then, using the same
parameters, \code{cv.elo.run} trains an elo.run on the first and second
season, then evaluates on the third season, and so on. Once the second
through fifth seasons have been evaluated, the process repeats with a new
set of parameters.

\code{new.team.elo} is used for evaluating new teams. Sometimes new teams
will join tournaments or games, especially over large datasets or small datasets
with a lot of folds (the latter, by the way, is not recommended), to handle
those instances, those new teams are treated as having an elo of 1500 unless
specified otherwise by \code{new.team.elo}. For example, an expansion team
joining a professional sports league will tend to perform worse than the
inaugural teams initially, and hence, a \code{new.team.elo} value lower than
1500 may be more predictive.
}
\examples{
data(tournament)
params = expand.grid(kval = seq(1,250,by=5),
                     hfa = seq(0,100,by=5))
cv.elo.run(score(points.Home, points.Visitor) ~ adjust(team.Home, hfa) + team.Visitor + k(kval),
data = tournament,
optimfun = 'mse',
gridsearch = params,
nfolds = 3)
}
